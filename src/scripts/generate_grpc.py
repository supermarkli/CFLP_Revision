#!/usr/bin/env python3

import os
import subprocess
import sys

def install_dependencies():
    """安装必要的依赖"""
    print("Installing dependencies...")
    subprocess.check_call([sys.executable, "-m", "pip", "install", "grpcio", "grpcio-tools", "protobuf"])

def modify_grpc_imports(pb2_grpc_file):
    """修改 pb2_grpc 文件的导入语句"""
    print(f"Modifying imports in {pb2_grpc_file}...")
    
    # 读取文件内容
    with open(pb2_grpc_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # 准备新的导入语句
    new_imports = '''# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import os
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import src.grpc.generated.federation_pb2 as federation__pb2

'''
    
    # 找到第一个导入语句的位置
    import_start = content.find('import')
    if import_start == -1:
        print("Warning: Could not find import statements")
        return
        
    # 找到导入语句块的结束位置
    next_line_after_imports = content.find('\n\nGRPC_GENERATED_VERSION')
    
    if next_line_after_imports == -1:
        print("Warning: Could not find end of import section")
        return
    
    # 替换导入语句
    new_content = content[:content.find('# Generated')] + new_imports + content[next_line_after_imports:]
    
    # 写回文件
    with open(pb2_grpc_file, 'w', encoding='utf-8') as f:
        f.write(new_content)
    
    print("Successfully modified imports")

def generate_grpc_code():
    """生成 gRPC 代码"""
    print("Generating gRPC code...")
    
    # 获取当前脚本所在目录的父目录
    base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    
    # 设置路径
    proto_dir = os.path.join(base_dir, "grpc", "protos")
    generated_dir = os.path.join(base_dir, "grpc", "generated")
    
    # 确保目录存在
    if not os.path.exists(proto_dir):
        print(f"Error: proto directory not found at {proto_dir}")
        sys.exit(1)
        
    if not os.path.exists(generated_dir):
        os.makedirs(generated_dir)
    
    # 生成 Python gRPC 代码
    subprocess.check_call([
        sys.executable,
        "-m",
        "grpc_tools.protoc",
        f"-I{proto_dir}",
        f"--python_out={generated_dir}",
        f"--grpc_python_out={generated_dir}",
        os.path.join(proto_dir, "federation.proto")
    ])
    
    # 检查生成的文件
    generated_files = [
        os.path.join(generated_dir, "federation_pb2.py"),
        os.path.join(generated_dir, "federation_pb2_grpc.py")
    ]
    
    for file in generated_files:
        if not os.path.exists(file):
            print(f"Error: Failed to generate {file}")
            sys.exit(1)
    
    # 修改 pb2_grpc 文件的导入语句
    modify_grpc_imports(generated_files[1])
        
    print("Successfully generated gRPC files:")
    for file in generated_files:
        print(f"- {file}")

if __name__ == "__main__":
    install_dependencies()
    generate_grpc_code() 